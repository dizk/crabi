syntax = "proto3";

package ProtobufBroker;
option java_package = "ch.cryptowat.protobuf";

enum FundingType {
  Spot = 0;
  Margin = 1;
  Staking = 2;
}

message PrivateOrder {
  string id = 1;
  int64 time = 2;

  int32 side = 5;

  enum Type {
    Market = 0;
    Limit = 1;
    StopLoss = 2;
    StopLossLimit = 3;
    TakeProfit = 4;
    TakeProfitLimit = 5;
    StopLossTakeProfit = 6;
    StopLossTakeProfitLimit = 7;
    TrailingStopLoss = 8;
    TrailingStopLossLimit = 9;
    StopLossAndLimit = 10;
    FillOrKill = 11;
    SettlePosition = 12;
  }

  Type type = 6;

  FundingType fundingType = 7;

  enum PriceParamType {
    AbsoluteValue = 0;
    OffsetValue = 1;
    PrecentageOffsetValue = 2;
  }

  message PriceParam {
    string valueString = 3;
    PriceParamType type = 2;

    reserved "value";
    reserved 1;
  }

  repeated PriceParam priceParams = 8; // The order of these matters

  string amountParamString = 16;

  string amountFilledString = 17;

  string leverage = 10;

  // For trailing orders
  // DEPRECATED; use strings instead

  string currentStopString = 18;
  string initialStopString = 19;

  int64 startTime = 13;
  int64 expireTime = 14;

  float rate = 15;

  bool  hasClosingOrder = 20;
  Type  closingOrderType = 21;
  repeated PriceParam closingOrderPriceParams = 22; // The order of these matters

  reserved "price", "amount", "currentStop", "initialStop", "amountParam";
  reserved 3, 4, 9, 11, 12;

  enum CurrencyPairSide {
    CURRENCY_PAIR_SIDE_UNKNOWN = 0;
    CURRENCY_PAIR_SIDE_BASE = 1;
    CURRENCY_PAIR_SIDE_QUOTE = 2;
  }
  CurrencyPairSide fee_currency = 23;
  // PostOnly ensures that a limit order has to be posted on the books (or canceled) entailing maker fees.
  // On the other hand, this feature prevents placing a limit buy order that matches
  // against the sell side of the order book (and vice versa for sell orders) which would result in taker fees.
  bool post_only = 24;
}

message PrivateTrade {
  string externalId = 7;

  string orderId = 8;

  int64 time = 2;
  int64 timeMillis = 6;

  string priceString = 9;
  string amountString = 10;

  int32 side = 5;

// Deprecated since we don't want to expose our SQL IDs
  int64 id = 1;

  reserved "price", "amount";
  reserved 3, 4;
}

message PrivatePosition {
  string id = 1;
  int64 time = 2;
  int32 side = 3;

  string avgPriceString = 9;

  string amountOpenString = 10;
  string amountClosedString = 11;

  string profitLoss = 12;

  repeated string orderIds = 7;

  // NOTE:
  // Trade ids are sent as strings here, while historically they
  // have been represented as integers. We need to transition to using
  // strings everywhere because of the rectangle/square rule; using
  // ints is simply not compatible with some exchanges which use UUIDs (like Kraken lol)
  repeated string tradeIds = 8;

  reserved "avgPrice", "amountOpen", "amountClosed";
  reserved 4, 5, 6;
}

message Balance {
  string currency = 1;
  string amountString = 3;

  // string asset = 4;
  // string symbol = 5;
  // string amountTotal = 6;
  // string amountAvailable = 7;

  reserved "amount";
  reserved 2;
}

message Balances {
  FundingType fundingType = 1;
  repeated Balance balances = 2;

  // AllBalances grep flag: Ai33fA
  // string name = 5;
  // string error = 6;

  reserved 3;
  reserved 4;
}
